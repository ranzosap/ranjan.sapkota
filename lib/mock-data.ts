// Mock data to replace contentlayer in preview environment
export interface Article {
  slug: string
  title: string
  authors: string[]
  year: number
  month?: number
  publication_venue: string
  abstract?: string
  tags: string[]
  published: boolean
  featured?: boolean
  pdf_url?: string
  code_url?: string
  dataset_url?: string
  doi?: string
  thumbnail?: string
  readingTime: number
  url: string
  body: { code: string }
  github_link?: string
}

export interface Project {
  slug: string
  title: string
  description: string
  startDate: string
  endDate?: string
  status: "in-progress" | "completed" | "on-hold" | "cancelled"
  tags: string[]
  featured?: boolean
  collaborators?: string[]
  funding?: string[]
  github?: string
  website?: string
  body: { code: string }
}

export const mockArticles: Article[] = [
  {
    slug: "towards-reducing-chemical-usage-weed-control",
    title:
      "Towards reducing chemical usage for weed control in agriculture using UAS imagery analysis and computer vision techniques",
    authors: ["Ranjan Sapkota", "J. Stenger", "M. Ostlie", "P. Flores"],
    year: 2023,
    month: 4,
    publication_venue: "Scientific Reports, Nature Portfolio",
    abstract:
      "This research demonstrates a 26% reduction in chemical usage for weed control through advanced computer vision techniques and UAS imagery analysis in agricultural row crop settings.",
    tags: ["Precision Agriculture", "Computer Vision", "UAS", "Weed Control", "Chemical Reduction"],
    published: true,
    featured: true,
    doi: "10.1038/s41598-023-33648-4",
    readingTime: 8,
    url: "/publications/towards-reducing-chemical-usage-weed-control",
    body: {
      code: "This study presents a comprehensive approach to reducing chemical usage in agriculture through precision weed control using unmanned aerial systems (UAS) and computer vision techniques...",
    },
    github_link: "https://github.com/example/repo/blob/main/published/towards-reducing-chemical-usage-weed-control.md",
  },
  {
    slug: "immature-green-apple-detection-yolov8",
    title: "Immature green apple detection and sizing in commercial orchards using YOLOv8 and shape fitting techniques",
    authors: ["Ranjan Sapkota", "D. Ahmed", "M. Churuvija", "M. Karkee"],
    year: 2024,
    month: 3,
    publication_venue: "IEEE Access",
    abstract:
      "Advanced object detection system for robotic fruit thinning applications in commercial apple orchards using state-of-the-art YOLO architecture and shape fitting techniques.",
    tags: ["Agricultural Robotics", "YOLO", "Fruit Detection", "Computer Vision", "Apple Orchards"],
    published: true,
    featured: true,
    doi: "10.1109/ACCESS.2024.3378456",
    readingTime: 10,
    url: "/publications/immature-green-apple-detection-yolov8",
    body: {
      code: "This paper presents a novel approach for detecting and sizing immature green apples in commercial orchards using YOLOv8 architecture combined with advanced shape fitting techniques...",
    },
    github_link: "https://github.com/example/repo/blob/main/published/immature-green-apple-detection-yolov8.md",
  },
  {
    slug: "comparing-yolov8-mask-rcnn-instance-segmentation",
    title: "Comparing YOLOv8 and Mask R-CNN for instance segmentation in complex orchard environments",
    authors: ["Ranjan Sapkota", "D. Ahmed", "M. Karkee"],
    year: 2024,
    month: 6,
    publication_venue: "Artificial Intelligence in Agriculture",
    abstract:
      "Comprehensive comparison of YOLOv8 and Mask R-CNN architectures for instance segmentation tasks in challenging orchard environments with complex lighting and occlusion conditions.",
    tags: ["Instance Segmentation", "YOLOv8", "Mask R-CNN", "Orchard Environments", "Agricultural AI"],
    published: true,
    featured: true,
    doi: "10.1016/j.aiia.2024.06.003",
    readingTime: 12,
    url: "/publications/comparing-yolov8-mask-rcnn-instance-segmentation",
    body: {
      code: "This study provides a detailed comparison between YOLOv8 and Mask R-CNN for instance segmentation in complex orchard environments...",
    },
    github_link:
      "https://github.com/example/repo/blob/main/published/comparing-yolov8-mask-rcnn-instance-segmentation.md",
  },
  {
    slug: "synthetic-meets-authentic-llm-generated-datasets",
    title: "Synthetic Meets Authentic: Leveraging LLM Generated Datasets for YOLO11 and YOLOv10-Based Apple Detection",
    authors: ["Ranjan Sapkota", "Z. Meng", "M. Karkee"],
    year: 2024,
    month: 11,
    publication_venue: "Smart Agricultural Technology",
    abstract:
      "Novel approach combining synthetic datasets generated by large language models with authentic data for improved apple detection using latest YOLO architectures.",
    tags: ["LLM", "Synthetic Data", "YOLO11", "YOLOv10", "Apple Detection", "Agricultural AI"],
    published: true,
    featured: true,
    doi: "10.1016/j.atech.2024.100614",
    readingTime: 9,
    url: "/publications/synthetic-meets-authentic-llm-generated-datasets",
    body: {
      code: "This research explores the integration of synthetic datasets generated by large language models with authentic agricultural data...",
    },
    github_link:
      "https://github.com/example/repo/blob/main/published/synthetic-meets-authentic-llm-generated-datasets.md",
  },
  {
    slug: "vision-based-robotic-system-precision-pollination",
    title: "A vision-based robotic system for precision pollination of apples",
    authors: ["U. Bhattarai", "Ranjan Sapkota", "S. Kshetri", "C. Mo", "M. D. Whiting", "Q. Zhang", "M. Karkee"],
    year: 2025,
    month: 1,
    publication_venue: "Computers and Electronics in Agriculture",
    abstract:
      "Development of an advanced vision-based robotic system for precision pollination in commercial apple orchards, addressing labor shortages and improving pollination efficiency.",
    tags: ["Robotic Pollination", "Computer Vision", "Apple Orchards", "Precision Agriculture", "Robotics"],
    published: true,
    featured: true,
    doi: "10.1016/j.compag.2025.110158",
    readingTime: 11,
    url: "/publications/vision-based-robotic-system-precision-pollination",
    body: {
      code: "This paper presents a comprehensive vision-based robotic system designed for precision pollination of apple trees in commercial orchard settings...",
    },
    github_link:
      "https://github.com/example/repo/blob/main/published/vision-based-robotic-system-precision-pollination.md",
  },
]

export const mockProjects: Project[] = [
  {
    slug: "robotic-pollination-system",
    title: "Robotic System for King-Flower Pollination in Commercial Orchards",
    description:
      "Development of an automated robotic system for precision pollination of apple trees, addressing labor shortages and improving fruit quality in commercial orchards.",
    startDate: "2022-01-01",
    endDate: "2024-12-31",
    status: "completed",
    tags: ["Robotic Pollination", "Computer Vision", "Agricultural Automation", "Apple Orchards"],
    featured: true,
    collaborators: ["Cornell University", "Washington State University"],
    funding: ["USDA Grant", "NSF Agricultural Robotics Initiative"],
    body: {
      code: "# Robotic Pollination System\n\nThis project develops an advanced robotic system for automated pollination in commercial apple orchards...",
    },
  },
  {
    slug: "precision-fruit-thinning-robot",
    title: "Precision Fruit Thinning Robot for Commercial Orchards",
    description:
      "Design and development of robotic end-effectors and vision systems for automated fruit thinning in apple orchards to optimize crop load and improve fruit quality.",
    startDate: "2023-03-01",
    status: "in-progress",
    tags: ["Fruit Thinning", "End-effector Design", "Machine Vision", "Agricultural Robotics"],
    featured: true,
    collaborators: ["Cornell University", "Washington State University", "Commercial Orchard Partners"],
    funding: ["USDA NIFA Grant", "Industry Partnership Funding"],
    body: {
      code: "# Precision Fruit Thinning Robot\n\nDeveloping advanced robotic systems for automated fruit thinning operations...",
    },
  },
  {
    slug: "multimodal-llm-agriculture",
    title: "Multimodal Large Language Models for Agricultural Applications",
    description:
      "Research and development of multimodal LLMs for various agricultural applications including crop monitoring, disease detection, and decision support systems.",
    startDate: "2024-01-01",
    status: "in-progress",
    tags: ["Multimodal LLM", "Agricultural AI", "Computer Vision", "Natural Language Processing"],
    featured: true,
    collaborators: ["Cornell University", "AI Research Labs"],
    funding: ["NSF AI Institute", "Cornell Tech Research Grant"],
    body: {
      code: "# Multimodal LLM for Agriculture\n\nExploring the application of large language models in agricultural contexts...",
    },
  },
  {
    slug: "uas-precision-weed-control",
    title: "UAS-Based Precision Weed Control System",
    description:
      "Development of unmanned aerial systems integrated with computer vision for precision weed detection and targeted herbicide application, achieving 26% reduction in chemical usage.",
    startDate: "2021-06-01",
    endDate: "2022-12-31",
    status: "completed",
    tags: ["UAS", "Precision Agriculture", "Weed Control", "Computer Vision", "Chemical Reduction"],
    collaborators: ["North Dakota State University"],
    funding: ["NDSU Research Grant", "Agricultural Extension Service"],
    body: {
      code: "# UAS Precision Weed Control\n\nThis project developed an integrated system for precision weed control using unmanned aerial systems...",
    },
  },
]

// Helper functions to replace contentlayer functions
import { githubService } from "./github-service"

export function saveArticle(article: Omit<Article, "slug" | "url" | "readingTime">): Article {
  const slug = article.title
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-|-$)/g, "")
  const readingTime = Math.ceil(article.body.code.split(" ").length / 200) // Estimate reading time

  // Generate GitHub link
  const githubLink = githubService.generateArticleLink(article.title)

  const newArticle: Article = {
    ...article,
    slug,
    url: `/publications/${slug}`,
    readingTime,
    github_link: githubLink,
    authors: article.authors || ["Ranjan Sapkota"],
    tags: article.tags || [],
    published: article.published || false,
    featured: article.featured || false,
    year: article.year || new Date().getFullYear(),
    month: article.month || new Date().getMonth() + 1,
    publication_venue: article.publication_venue || "",
    abstract: article.abstract || "",
    doi: article.doi || "",
    pdf_url: article.pdf_url || "",
    code_url: article.code_url || "",
    dataset_url: article.dataset_url || "",
    thumbnail: article.thumbnail || "",
  }

  // Get existing articles from localStorage
  const existingArticles = getStoredArticles()
  const updatedArticles = [...existingArticles, newArticle]

  // Save to localStorage (keeping for backward compatibility)
  if (typeof window !== "undefined") {
    localStorage.setItem("userArticles", JSON.stringify(updatedArticles))

    // Also save to GitHub (simulated)
    const status = article.published ? "published" : "draft"
    const filePath = githubService.getArticlePath(slug, status)
    const content = githubService.formatArticleContent(newArticle)

    githubService
      .createOrUpdateFile({
        path: filePath,
        content: content,
        message: `Add new article: ${article.title}`,
      })
      .then((success) => {
        console.log("[v0] Article saved to GitHub:", success ? "Success" : "Failed")
      })
  }

  return newArticle
}

export function updateArticle(slug: string, updates: Partial<Article>): Article | null {
  const existingArticles = getStoredArticles()
  const articleIndex = existingArticles.findIndex((article) => article.slug === slug)

  if (articleIndex === -1) return null

  const originalArticle = existingArticles[articleIndex]
  const updatedArticle = { ...originalArticle, ...updates }
  existingArticles[articleIndex] = updatedArticle

  if (typeof window !== "undefined") {
    localStorage.setItem("userArticles", JSON.stringify(existingArticles))

    // Handle GitHub storage when status changes
    const statusChanged = originalArticle.published !== updatedArticle.published

    if (statusChanged) {
      // Remove from old location
      const oldStatus = originalArticle.published ? "published" : "draft"
      const oldPath = githubService.getArticlePath(slug, oldStatus)

      // Add to new location
      const newStatus = updatedArticle.published ? "published" : "draft"
      const newPath = githubService.getArticlePath(slug, newStatus)
      const content = githubService.formatArticleContent(updatedArticle)

      // Simulate moving the file
      githubService
        .deleteFile(oldPath, `Move article from ${oldStatus} to ${newStatus}`, "demo-sha")
        .then(() => {
          return githubService.createOrUpdateFile({
            path: newPath,
            content: content,
            message: `Update article status: ${updatedArticle.title} (${oldStatus} → ${newStatus})`,
          })
        })
        .then((success) => {
          console.log("[v0] Article status updated in GitHub:", success ? "Success" : "Failed")
        })
    } else {
      // Just update the existing file
      const status = updatedArticle.published ? "published" : "draft"
      const filePath = githubService.getArticlePath(slug, status)
      const content = githubService.formatArticleContent(updatedArticle)

      githubService
        .createOrUpdateFile({
          path: filePath,
          content: content,
          message: `Update article: ${updatedArticle.title}`,
        })
        .then((success) => {
          console.log("[v0] Article updated in GitHub:", success ? "Success" : "Failed")
        })
    }
  }

  return updatedArticle
}

export function deleteArticle(slug: string): boolean {
  const existingArticles = getStoredArticles()
  const articleToDelete = existingArticles.find((article) => article.slug === slug)
  const filteredArticles = existingArticles.filter((article) => article.slug !== slug)

  if (typeof window !== "undefined") {
    localStorage.setItem("userArticles", JSON.stringify(filteredArticles))

    // Also delete from GitHub if article exists
    if (articleToDelete) {
      const status = articleToDelete.published ? "published" : "draft"
      const filePath = githubService.getArticlePath(slug, status)

      githubService.deleteFile(filePath, `Delete article: ${articleToDelete.title}`, "demo-sha").then((success) => {
        console.log("[v0] Article deleted from GitHub:", success ? "Success" : "Failed")
      })
    }
  }

  return filteredArticles.length < existingArticles.length
}

function getStoredArticles(): Article[] {
  if (typeof window === "undefined") return []

  try {
    const stored = localStorage.getItem("userArticles")
    return stored ? JSON.parse(stored) : []
  } catch {
    return []
  }
}

export async function syncArticlesFromGitHub(): Promise<void> {
  try {
    const githubArticles = await githubService.getArticlesFromGitHub()

    if (githubArticles.length > 0 && typeof window !== "undefined") {
      // Merge with existing localStorage articles, avoiding duplicates
      const existingArticles = getStoredArticles()
      const mergedArticles = [...existingArticles]

      githubArticles.forEach((githubArticle) => {
        const existingIndex = mergedArticles.findIndex((article) => article.slug === githubArticle.slug)
        if (existingIndex >= 0) {
          // Update existing article
          mergedArticles[existingIndex] = githubArticle
        } else {
          // Add new article
          mergedArticles.push(githubArticle)
        }
      })

      localStorage.setItem("userArticles", JSON.stringify(mergedArticles))
      console.log("[v0] Synced articles from GitHub:", githubArticles.length)
    }
  } catch (error) {
    console.error("[v0] Error syncing articles from GitHub:", error)
  }
}

export async function getAllArticlesWithSync(): Promise<Article[]> {
  await syncArticlesFromGitHub()
  return getAllArticles()
}

export async function getPublishedArticlesWithSync(): Promise<Article[]> {
  await syncArticlesFromGitHub()
  return getPublishedArticles()
}

export function getAllArticles(): Article[] {
  const storedArticles = getStoredArticles()
  const allArticles = [...mockArticles, ...storedArticles]
  return allArticles.sort((a, b) => {
    if (a.year !== b.year) {
      return b.year - a.year
    }
    const aMonth = a.month || 12
    const bMonth = b.month || 12
    return bMonth - aMonth
  })
}

export function getPublishedArticles(): Article[] {
  const storedArticles = getStoredArticles()
  const allArticles = [...mockArticles, ...storedArticles]
  const publishedArticles = allArticles.filter((article) => article.published)
  return publishedArticles.sort((a, b) => {
    if (a.year !== b.year) {
      return b.year - a.year
    }
    const aMonth = a.month || 12
    const bMonth = b.month || 12
    return bMonth - aMonth
  })
}

export function getAllTags(): string[] {
  const storedArticles = getStoredArticles()
  const allArticles = [...mockArticles, ...storedArticles]
  const tags = new Set<string>()
  allArticles.forEach((article) => {
    article.tags.forEach((tag) => tags.add(tag))
  })
  return Array.from(tags).sort()
}

export function getAllYears(): number[] {
  const storedArticles = getStoredArticles()
  const allArticles = [...mockArticles, ...storedArticles]
  const years = new Set<number>()
  allArticles.forEach((article) => {
    years.add(article.year)
  })
  return Array.from(years).sort((a, b) => b - a)
}

export function getRelatedArticles(currentArticle: Article): Article[] {
  const storedArticles = getStoredArticles()
  const allArticles = [...mockArticles, ...storedArticles]
  return allArticles
    .filter(
      (article) =>
        article.slug !== currentArticle.slug &&
        article.published &&
        article.tags.some((tag) => currentArticle.tags.includes(tag)),
    )
    .slice(0, 3)
}

export function getAllProjects(): Project[] {
  return mockProjects
}
